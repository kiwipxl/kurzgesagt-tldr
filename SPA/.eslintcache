[{"C:\\Development\\kurzgesagt-tldr\\SPA\\src\\index.js":"1","C:\\Development\\kurzgesagt-tldr\\SPA\\src\\App.js":"2","C:\\Development\\kurzgesagt-tldr\\SPA\\src\\components\\VideoCard.js":"3","C:\\Development\\kurzgesagt-tldr\\SPA\\src\\components\\VideoFeed.js":"4"},{"size":568,"mtime":1606362787882,"results":"5","hashOfConfig":"6"},{"size":247,"mtime":1606383456728,"results":"7","hashOfConfig":"6"},{"size":1106,"mtime":1606440734920,"results":"8","hashOfConfig":"6"},{"size":2032,"mtime":1606450444313,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m05cxa",{"filePath":"12","messages":"13","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\Development\\kurzgesagt-tldr\\SPA\\src\\index.js",[],"C:\\Development\\kurzgesagt-tldr\\SPA\\src\\App.js",["19"],"C:\\Development\\kurzgesagt-tldr\\SPA\\src\\components\\VideoCard.js",["20"],"C:\\Development\\kurzgesagt-tldr\\SPA\\src\\components\\VideoFeed.js",["21","22"],"import React from 'react';\r\nimport VideoCard from './VideoCard';\r\nimport queryString from 'query-string';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nexport default (props) => {\r\n  const [items, setItems] = React.useState([]);\r\n  const [isFetching, setIsFetching] = React.useState(true);\r\n\r\n  const rootRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    if (!isFetching) {\r\n      return;\r\n    }\r\n    \r\n    const params = {\r\n      startAt: items.length, \r\n      maxResults: 10\r\n    };\r\n\r\n    fetch(`http://localhost:7800/?${queryString.stringify(params)}`)\r\n      .then(res => res.json())\r\n      .then(newItems => {\r\n        setItems(items.concat(newItems));\r\n        setIsFetching(false);\r\n      })\r\n      .catch(err => console.error(err));\r\n  }, [isFetching]);\r\n\r\n  function onScroll(ev) {\r\n    if (!rootRef.current.firstElementChild) {\r\n      return;\r\n    }\r\n\r\n    const rootRefBottom = rootRef.current.getClientRects()[0].bottom;\r\n    const cardHeightPadding = 50; // rough value, good enough\r\n    const cardHeight = rootRef.current.firstElementChild.clientHeight + cardHeightPadding;\r\n\r\n    if (rootRefBottom - cardHeight <= window.innerHeight) {\r\n      setIsFetching(true);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener('scroll', onScroll);\r\n\r\n    return () => window.removeEventListener('scroll', onScroll);\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={rootRef} className=\"video-feed\">\r\n      {items.map(video => (\r\n        <div key={video.id} className=\"video-feed-card-container\">\r\n          <VideoCard\r\n            title={video.title}\r\n            numViews={video.numViews}\r\n            publishedAt={video.publishedAt}\r\n            thumbnail={video.thumbnails.maxresUrl}\r\n          >\r\n\r\n          </VideoCard>\r\n        </div>\r\n      ))}\r\n\r\n      {isFetching && \r\n        <div className=\"video-feed-spinner\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n",{"ruleId":"23","severity":2,"message":"24","line":8,"column":10,"nodeType":"25","endLine":8,"endColumn":20},{"ruleId":"26","severity":1,"message":"27","line":4,"column":1,"nodeType":"28","endLine":31,"endColumn":2},{"ruleId":"26","severity":1,"message":"27","line":6,"column":1,"nodeType":"28","endLine":75,"endColumn":2},{"ruleId":"29","severity":1,"message":"30","line":29,"column":6,"nodeType":"31","endLine":29,"endColumn":18,"suggestions":"32"},"react/jsx-no-undef","'VideosGrid' is not defined.","JSXIdentifier","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'items'. Either include it or remove the dependency array. You can also do a functional update 'setItems(i => ...)' if you only need 'items' in the 'setItems' call.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [isFetching, items]",{"range":"36","text":"37"},[763,775],"[isFetching, items]"]